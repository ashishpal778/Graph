file 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Anmol NIET, [30.06.19 14:09]
#include <bits/stdc++.h>
using namespace std;

class Graph{

  private:

    void bfsUtil(int i){
      queue <int> q;
      // color[i] = 1;
      distance[i] = 0;
      q.push(i);

      while(!q.empty()){
        auto current = q.front();
        q.pop();
        cout<<current<<"-->";

        for(auto x: getNeibour(current)){
          if(color[x]==0){
            color[x] = 1;
            previous[x] = current;
            distance[x] = distance[current]+1;
            q.push(x);
            

          }
          color[current] = 2;
        }
      }

    }

    void dfsUtil(int i){
      visited[i] = 1;
      cout<<i<<"-->";
      for (auto x: getNeibour(i)){
        if (visited[x]==0){
          dfsUtil(x);
        }
      }


    }

  public:
    int n;
    int **adjMatrix;
    bool *visited;
    int *color;
    int *distance;
    int *previous;
    Graph(int n){
      this->n = n;
      visited = new bool [n];
      adjMatrix = new int* [n];
      distance = new int [n];
      color = new int [n];
      previous = new int [n];
      previous[0] = -1;

      for (int i=0;i<n;i++){
        adjMatrix[i] = new int [n];
        for (int j=0;j<n;j++){
          adjMatrix[i][j] = 0;
        }
      }

    }

    void addEdge(int frm, int to, int cost){
      if (frm>=0 && frm<n && to>=0 && to<n){
        adjMatrix[frm][to] = cost;
      }
    }

    void printEdges(){
      for(int i=0;i<n;i++){
        for (int j=0;j<n;j++){
          if(adjMatrix[i][j]!=0){
            cout<<i<<"-->"<<j<<" = "<<adjMatrix[i][j]<<"\n";
          }
        }
      }
    }

    vector<int> getNeibour(int id){
      vector<int> neibour;
      if (id>=0 && id<n ){
        auto temp = adjMatrix[id];
        for (int i = 0; i < n; ++i){
          if(temp[i]!=0){
            neibour.push_back(i);
          }
        }
      }

      return neibour;

      
    }

    

    void dfsRun(){
      for (int i = 0; i < n; ++i)
      {
        if (visited[i]==0){
          dfsUtil(i);
        }
      }

    }

    

    void bfsRun(){
      for (int i = 0; i < n; ++i){
        if(color[i]==0){
          bfsUtil(i);
        }      

      }

    }
};
..................................................................................................................................

file 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222

#include <bits/stdc++.h>
using namespace std;

class Graph{

  private:
    int n;
    int **adjMatrix;
    bool *visited;
    int *color;
    int *distance;

  public:
    Graph(int n){
      this->n = n;
      visited = new bool [n];
      adjMatrix = new int* [n];
      distance = new int [n];
      color = new int [n];

      for (int i=0;i<n;i++){
        adjMatrix[i] = new int [n];
        for (int j=0;j<n;j++){
          adjMatrix[i][j] = 0;
        }
      }

    }

    void addEdge(int frm, int to, int cost){
      if (frm>=0 && frm<n && to>=0 && to<n){
        adjMatrix[frm][to] = cost;
      }
    }

    void printEdges(){
      for(int i=0;i<n;i++){
        for (int j=0;j<n;j++){
          if(adjMatrix[i][j]!=0){
            cout<<i<<"-->"<<j<<" = "<<adjMatrix[i][j]<<"\n";
          }
        }
      }
    }

    vector<int> getNeibour(int id){
      vector<int> neibour;
      if (id>=0 && id<n ){
        auto temp = adjMatrix[id];
        for (int i = 0; i < n; ++i){
          if(temp[i]!=0){
            neibour.push_back(i);
          }
        }
      }

      return neibour;

      
    }

    void dfsUtil(int i){
      visited[i] = 1;
      cout<<i<<"-->";
      for (auto x: getNeibour(i)){
        if (visited[x]==0){
          dfsUtil(x);
        }
      }


    }

    void dfsRun(){
      for (int i = 0; i < n; ++i)
      {
        if (visited[i]==0){
          dfsUtil(i);
        }
      }

    }

    void bfsUtil(int i){
      queue <int> q;
      // color[i] = 1;
      distance[i] = 0;
      q.push(i);

      while(!q.empty()){
        auto current = q.front();
        q.pop();
        cout<<current<<"-->";

        for(auto x: getNeibour(current)){
          if(color[x]==0){
            color[x] = 1;
            distance[x] = distance[current]+1;
            q.push(x);
            

          }
          color[current] = 2;
        }
      }

    }

    void bfsRun(){
      for (int i = 0; i < n; ++i){
        if(color[i]==0){
          bfsUtil(i);
        }      

      }

    }





};

int main()
{
  Graph G(5);
  G.addEdge(0,1,2);
  G.addEdge(1,2,3);
  G.addEdge(1,3,4);

  G.addEdge(3,4,3);
  G.addEdge(0,4,5);

  G.printEdges();
  // G.printVisited();
  // G.dfsRun();
  G.bfsRun();


  return 0;
  
}

Anmol NIET, [30.06.19 14:09]
#include "impByArray.cpp"
#define INF 99999
class GraphAlgo : public Graph{
  private:
    vector<int> dist;
    vector<int> path;

  public:
    GraphAlgo(int n):Graph(n){
      for(int i =0;i<n;i++){
        dist.push_back(INF);
      }

      for(int i =0;i<n;i++){
        path.push_back(-1);
      }

    }

    bool comp(auto &a, auto &b){
      if(a.first > b.first){
        return false;
      }else{
        return true;
      }
    }

    void Dijkstra(int src){
      cout<<"Dijkstra algoritm";
      priority_queue <pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
      pq.push(make_pair(0,src));

      dist[src] = 0;


      while(!pq.empty()){

        auto current = pq.top().second;
        pq.pop();
        

        for (auto x: getNeibour(current)){
          
          int newDist = dist[current]+adjMatrix[current][x];
          
          if (newDist<dist[x]){
            dist[x] = newDist;
            pq.push(make_pair(newDist,x));
            path[x] = current;
          }
        }

      }
      for (int i = 0; i < n; ++i)
      {
        cout<<path[i]<<",";
      }

    }





};




int main()
{
  GraphAlgo G(5);
  G.addEdge(0,1,2);
  G.addEdge(1,2,3);
  G.addEdge(1,3,4);

  G.addEdge(3,4,3);
  G.addEdge(0,4,5);

  G.printEdges();
  G.Dijkstra(1);
  // G.printVisited();
  // G.dfsRun();
  // G.bfsRun();
  // G.Dijkstra(0);


  return 0;
  
}
